#!/usr/bin/env bash

### READ ME ###
# This script was originally written by riobard @ https://github.com/riobard/bash-powerline
# The most recent copy of my fork can be found at https://github.com/maxbrisance/profile
# 
# bash_powerline is a function that, when run by your .bashrc,
# will generate a nice command prompt that displays:
# 
# The current username
# The OS name and version number (for Linux boxes)
# The hostname
# The working directory
# The .git metadata for the working directory
# The shell-level
# A green/red visual indicator of the exit status of the last command
# 
# It is designed to be used with the "solarized" (dark) iterm2 theme
# To install, simply "source" this file in your .bashrc

bash_powerline() {

	# Defines the bash_powerline colorscheme variables
        # Matches the Solarized-dark iterm2 terminal profile/theme	
	solarized_theme_setter() {
		readonly FG_BASE03="\[$(tput setaf 8)\]"
		readonly FG_BASE02="\[$(tput setaf 0)\]"
		readonly FG_BASE01="\[$(tput setaf 10)\]"
		readonly FG_BASE00="\[$(tput setaf 11)\]"
		readonly FG_BASE0="\[$(tput setaf 12)\]"
		readonly FG_BASE1="\[$(tput setaf 14)\]"
		readonly FG_BASE2="\[$(tput setaf 7)\]"
		readonly FG_BASE3="\[$(tput setaf 15)\]"
		readonly BG_BASE03="\[$(tput setab 8)\]"
		readonly BG_BASE02="\[$(tput setab 0)\]"
		readonly BG_BASE01="\[$(tput setab 10)\]"
		readonly BG_BASE00="\[$(tput setab 11)\]"
		readonly BG_BASE0="\[$(tput setab 12)\]"
		readonly BG_BASE1="\[$(tput setab 14)\]"
		readonly BG_BASE2="\[$(tput setab 7)\]"
		readonly BG_BASE3="\[$(tput setab 15)\]"
		readonly FG_YELLOW="\[$(tput setaf 3)\]"
		readonly FG_ORANGE="\[$(tput setaf 9)\]"
		readonly FG_RED="\[$(tput setaf 1)\]"
		readonly FG_MAGENTA="\[$(tput setaf 5)\]"
		readonly FG_VIOLET="\[$(tput setaf 13)\]"
		readonly FG_BLUE="\[$(tput setaf 4)\]"
		readonly FG_CYAN="\[$(tput setaf 6)\]"
		readonly FG_GREEN="\[$(tput setaf 2)\]"
		readonly BG_YELLOW="\[$(tput setab 3)\]"
		readonly BG_ORANGE="\[$(tput setab 9)\]"
		readonly BG_RED="\[$(tput setab 1)\]"
		readonly BG_MAGENTA="\[$(tput setab 5)\]"
		readonly BG_VIOLET="\[$(tput setab 13)\]"
		readonly BG_BLUE="\[$(tput setab 4)\]"
		readonly BG_CYAN="\[$(tput setab 6)\]"
		readonly BG_GREEN="\[$(tput setab 2)\]"
		readonly DIM="\[$(tput dim)\]"
		readonly REVERSE="\[$(tput rev)\]"
		readonly RESET="\[$(tput sgr0)\]"
		readonly BOLD="\[$(tput bold)\]"
	}

	# Executes the solarized_theme_setter()
	solarized_theme_setter

	# Define the function that parse out the OS name and version number
	# This info is used later by the ps1_setter()
	os_parser() {
		UNAME={$(uname)}
		if [[ "$UNAME" == "Darwin" ]]; then
			readonly OS="MacOSX"
		elif [[ "$UNAME" == "Linux" ]]; then
			if [ -f /etc/redhat-release ]; then
				readonly OS="$(cat /etc/redhat-release | awk '{print $1 $3}')"
			elif [ -f /etc/lsb-release ]; then
				local DISTRIB_ID="$(grep 'DISTRIB_ID' /etc/lsb-release | cut -d = -f 2)" &&
				local DISTRIB_RELEASE="$(grep 'DISTRIB_RELEASE' /etc/lsb-release | cut -d = -f 2)" &&
				readonly OS="$DISTRIB_ID$DISTRIB_RELEASE"	
			else
				readonly OS=$(uname) && exit 1
			fi
		else
			readonly OS="UNAME" && exit 1
		fi
	}
	
	# Defines the function that parses git info 
	# Info from the .git metadata directory is pulled after each change of directory
	# This info is used later by the ps1_setter()
	git_info_parser() {
		# Defines the unicode symbols used in the powerline
		readonly GIT_BRANCH_SYMBOL='⑂ '
		readonly GIT_BRANCH_CHANGED_SYMBOL='+'
		readonly GIT_NEED_PUSH_SYMBOL='⇡'
		readonly GIT_NEED_PULL_SYMBOL='⇣'
		[ -x "$(which git 2>/dev/null )" ] || return # retun if git not found
		# Gets the current branch name or short SHA1 hash for detached head
		local branch="$(git symbolic-ref --short HEAD 2>/dev/null || git describe --tags --always 2>/dev/null)"
		[ -n "$branch" ] || return # git branch not found
		local marks
		# Parses out branch modification status
		[ -n "$(git status --porcelain)" ] && marks+=" $GIT_BRANCH_CHANGED_SYMBOL"
		# Parses out how many commits local branch is ahead/behind of remote
		local stat="$(git status --porcelain --branch | grep '^##' | grep -o '\[.\+\]$')"
		local aheadN="$(echo $stat | grep -o 'ahead \d\+' | grep -o '\d\+')"
		local behindN="$(echo $stat | grep -o 'behind \d\+' | grep -o '\d\+')"
		[ -n "$aheadN" ] && marks+=" $GIT_NEED_PUSH_SYMBOL$aheadN"
		[ -n "$behindN" ] && marks+=" $GIT_NEED_PULL_SYMBOL$behindN"
		# Prints the git branch segment without a trailing newline
		printf " $GIT_BRANCH_SYMBOL$branch$marks "
	}

	# Sets the $PS1 variable. Each time bash executes a command, ps1_setter() executes
	# The bash reserved variable $PROMPT_COMMAND takes its value from ps1_setter()
	ps1_setter() {
		# Check the exit code of the previous command
	        # display different colors in the prompt accordingly
		if [ $? -eq 0 ]; then
			local BG_EXIT="$BG_GREEN"
		else
			local BG_EXIT="$BG_RED"
		fi
		PS1="$BG_BASE1$FG_BASE3 USR:{$(whoami)} $BG_BASE3$FG_BASE0 DEV:{$OS|$(hostname)} $BG_BASE1$FG_BASE3 DIR:{$(pwd)} $RESET"
		PS1+="\n$BG_EXIT$FG_BASE3 {$SHLVL} $RESET"
		PS1+="$BG_BLUE$FG_BASE3$(git_info_parser)$RESET "
	}
	PROMPT_COMMAND=ps1_setter
}

# Runs the bash_powerline() function
bash_powerline

# Unsets the local variables in the function; the readonly variables remain in env
unset bash_powerline
